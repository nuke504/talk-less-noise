server {
    # Listen on port 80 for HTTP connections.
    # 'default_server' makes this the default catch-all server if no other
    # server_name matches the incoming request.
    listen 80 default_server;
    listen [::]:80 default_server; # Also listen on IPv6

    # Define the domain names this server block responds to.
    # Replace 'your_domain.com' and 'www.your_domain.com' with your actual domain(s).
    # The '_' acts as a catch-all if no specific domain is set or matched.
    server_name _;

    # Access and Error Logging:
    # Essential for monitoring and debugging your Nginx server.
    # 'combined' is a common log format.
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn; # Log errors at 'warn' level or higher

    # Client Request Body Size Limit:
    # Sets the maximum allowed size for the client request body.
    # Important for file uploads. Adjust as needed (e.g., 100M for larger files).
    client_max_body_size 10M;

    # Keepalive Timeout:
    # Timeout for keep-alive connections with the client.
    # Keeps the connection open for multiple requests, improving performance.
    keepalive_timeout 65;

    # Main Location Block: Handles all requests
    location / {
        # Proxy Pass:
        # Forwards all requests to the specified backend URL.
        # Make sure the ${BACKEND_API_URL} environment variable is correctly set
        # in your Nginx environment (e.g., Docker, systemd, or Nginx config).
        proxy_pass ${BACKEND_API_URL};

        # Proxy Headers:
        # Pass essential client headers to the backend, which helps the backend
        # properly identify the client's host, IP, and original protocol.
        proxy_set_header Host $host; # Passes the original Host header
        proxy_set_header X-Real-IP $remote_addr; # Passes the client's real IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Passes client IP and previous proxies
        proxy_set_header X-Forwarded-Proto $scheme; # Passes the protocol (http or https)

        # Proxy Buffering:
        # 'off' disables buffering of responses from the proxied server to Nginx.
        # This can be useful for real-time applications but might increase resource usage.
        # For most cases, 'on' (default) is fine.
        proxy_buffering off;

        # Proxy Redirect:
        # Prevents Nginx from rewriting 'Location' headers sent by the backend.
        # Important if your backend sends redirects (e.g., /login -> /dashboard).
        proxy_redirect off;

        # HTTP Version:
        # Ensures Nginx uses HTTP/1.1 for upstream connections, which supports
        # keep-alive connections to the backend.
        proxy_http_version 1.1;
        # Clear the 'Connection' header to ensure Nginx manages keep-alive
        # connections to the backend efficiently.
        proxy_set_header Connection "";

        # SNI for SSL/TLS Backend:
        # Enables Server Name Indication when proxying to an HTTPS backend.
        # This is crucial if your backend serves multiple SSL certificates.
        proxy_ssl_server_name on;

        # Internal Rewrite Rule:
        # If the root URL (/) is accessed, internally rewrite the request to /docs.
        # 'last' means Nginx will re-evaluate the new URI against location blocks.
        # The backend will receive a request for '/docs' in this scenario.
        rewrite ^/$ /docs last;
    }
}
